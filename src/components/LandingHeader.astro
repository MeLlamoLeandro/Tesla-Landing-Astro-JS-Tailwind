---
import Logo from "./Logo.astro";
---

<header
	id="landing-header"
	class="py-3 px-10 flex items-center fixed top-0 w-full justify-between z-40 text-white"
>
	<div class="flex flex-grow basis-0">
		<Logo />
	</div>
	<nav>
		<ul
			class="flex text-sm [&>li>a]:text-current [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2"
		>
			<li><a href="#">Model S</a></li>
			<li><a href="#">Model 3</a></li>
			<li><a href="#">Model X</a></li>
			<li><a href="#">Model Y</a></li>
			<li><a href="#">Powerwall</a></li>
			<li><a href="#">Carga</a></li>
		</ul>
	</nav>
	<nav class="flex flex-grow basis-0 justify-end">
		<ul
			class="flex text-sm [&>li>a]:text-current [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2"
		>
			<!-- uso text-current para traer el valor actual -->
			<li><a href="#">Soporte</a></li>
			<li><a href="#">Cuenta</a></li>
			<li><a href="#">Tienda</a></li>
			<li><a href="#">Men√∫</a></li>
		</ul>
	</nav>
</header>
<script>
	const $header = document.querySelector("#landing-header") as HTMLElement; //esto es definicion de typeScript

	/* defino las opciones, que es lo que hay que observar */
	const observerOptions = {
		root: null, // para que obseve el viewport, no un elemento en especial
		rootMargin: "0px", // para que lo tome di bien aparece el elemento
		threshold: 0.5, // el porcentaje de visibilidad que tiene que tener el elemento para detectarlo
	};
	/* defino el observador */
	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			const { isIntersecting } = entry;
			if (isIntersecting) {
				const color = entry.target.getAttribute("data-header-color");
				$header.style.color = color;
			}
		});
	}, observerOptions); //agrego las opciones definidas

	/* invoco la funcion de transformar el texto en las sections */
	const $sections = document.querySelectorAll(".landing-section");
	$sections.forEach((section) => observer.observe(section));
</script>
